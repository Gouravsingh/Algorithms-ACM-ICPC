import java.io.*;
class ADVANCED_EDIT_DISTANCE
{
	public static void main(String args[])throws IOException
	{
		InputReader reader =new InputReader(System.in);
		PrintWriter ob=new PrintWriter(System.out);
		while(1>0)
		{
			char x[]=reader.readString().toCharArray();
			char y[]=reader.readString().toCharArray();
			if(x[0]=='*' && y[0]=='*')
			break;
				int alen=x.length;
                int blen=y.length;
               	int INF=alen+blen;
               	int h[][]=new int[alen+2][blen+2];
               	h[0][0]=INF;
               	for(int i=0;i<=alen;i++)
               		{
                       h[i+1][1]=i;
                       h[i+1][0]=INF;
               		}
               		for(int j=0;j<=blen;j++)
               		{
                       h[1][j+1]=j;
                       h[0][j+1]=INF;
               		}
               int da[]=new int[124];
               for(int d=0;d<124;d++)
               da[d]=0;
               for(int i=1;i<=alen;i++)
               {
                       int db=0;
                       char ch2=x[i-1];
                       for(int j=1;j<=blen;j++)
                       {
                       			char ch=y[j-1];
                               	int i1=da[(int)ch];
                               	int j1=db;
                                int d=((ch2==ch)?0:1);
                                if(d==0)
                                db=j;
                                h[i+1][j+1]=minimum(h[i][j]+d,h[i+1][j]+1,h[i][j+1]+1,h[i1][j1]+(i-i1-1)+1+(j-j1-1));
                       }
                       da[(int)ch2]=i;
               }
             ob.println(h[alen+1][blen+1]);
            }
		ob.flush();
	}
	public static int minimum(int x,int y,int z,int w)
	{
    int k=(x>y)?y:x;
    k=(k>z)?z:k;
    k=(k>w)?w:k;
    return k;
	}
		static final class InputReader {
        private final InputStream stream;
        private final byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
 
        public InputReader(InputStream stream) {
            this.stream = stream;
        }
 
        private int read() throws IOException {
            if (curChar >= numChars) {
                curChar = 0;
                numChars = stream.read(buf);
                if (numChars <= 0) {
                    return -1;
                }
            }
            return buf[curChar++];
        }
 
        public final int readInt() throws IOException {
            return (int)readLong();
        }
 
        public final long readLong() throws IOException {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
                if (c == -1) throw new IOException();
            }
            boolean negative = false;
            if (c == '-') {
                negative = true;
                c = read();
            }
            long res = 0;
            do {
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return negative ? -res : res;
        }
 
        public final int[] readIntArray(int size) throws IOException {
            int[] array = new int[size];
            for (int i=0; i<size; i++) {
                array[i] = readInt();
            }
            return array;
        }
 
        public final long[] readLongArray(int size) throws IOException {
            long[] array = new long[size];
            for (int i=0; i<size; i++) {
                array[i] = readLong();
            }
            return array;
        }
 
        public final String readString() throws IOException {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            StringBuilder res = new StringBuilder();
            do {
                res.append((char)c);
                c = read();
            } while (!isSpaceChar(c));
            return res.toString();
        }
 
        private boolean isSpaceChar(int c) {
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }
    }
 
} 