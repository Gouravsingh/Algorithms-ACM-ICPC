import java.math.*;
import java.io.*;
import java.util.*;
class TwoDdp
{
	StringTokenizer st;
	BufferedReader in;
	PrintWriter ob;
	public static void main(String args[])throws IOException {
		new TwoDdp().run();
	}
	void run()throws IOException   {
		in=new BufferedReader(new FileReader("input.txt"));
		ob=new PrintWriter("output.txt");
		//in=new BufferedReader(new InputStreamReader(System.in));
		//ob=new PrintWriter(System.out);
		solve();
		ob.flush();
	}
	void solve()throws IOException {
      	read();
      	int n=ni();
      	int wt[]=new int[n+1];
      	int val[]=new int[n+1];
      	for(int i=1;i<=n;i++){
      		read();
      		wt[i]=ni();
      		val[i]=ni();
      	}
      	read();
	//we have only one bag of each item
      	int bagsize=ni();
      	int dp[][]=new int[n+1][bagsize+1];
      	for(int i=1;i<=n;i++){
      		for(int j=1;j<=bagsize;j++){
      			if(j<wt[i])
      				dp[i][j]=dp[i-1][j]; // if(j<wt[i]) means bag of size j and ur wt is more than bag size so cant include the item in bag hence dp[i-1][j]
      			else
      				dp[i][j]=Math.max(val[i]+dp[i-1][j-wt[i]],dp[i-1][j]);// max of including wt into bag + remaining wt that can be put or  not including item dp[i-1][j]
      		}
      	}
      	for(int a[] : dp){
      		for(int j : a)
      			System.out.print(j+" ");
      		System.out.println();
      	}

    }
	void read()throws IOException  {
		st=new StringTokenizer(in.readLine());
	}
	int ni(){
		return Integer.parseInt(st.nextToken());
	}
	long nl(){
		return Long.parseLong(st.nextToken());
	}
	double nd(){
		return Double.parseDouble(st.nextToken());
	}
	String ns(){
		return st.nextToken();
	}
	char nc(){
		return st.nextToken().charAt(0);
	}
	int[] nia(int n)throws IOException {
		int a[]=new int[n];
		read();
		for(int i=0;i<n;i++){
			a[i]=Integer.parseInt(st.nextToken());
		}
		return a;
	}
	long[] nla(int n)throws IOException {
		long a[]=new long[n];
		read();
		for(int i=0;i<n;i++){
			a[i]=Long.parseLong(st.nextToken());
		}
		return a;
	}
}