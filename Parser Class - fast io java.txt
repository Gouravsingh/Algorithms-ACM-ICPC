import java.io.PrintWriter;
import java.io.InputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.Arrays;
import java.util.TreeSet;
import java.util.Comparator;
class Main
{
	Parser in;
	PrintWriter ob;
	
	public static void main(String args[])throws IOException
	{ 
		new Main().run();
	}
	void run()
	{
		in=new Parser(System.in);
		int n=in.nextInt();
	}
	static class Parser {
        final private int BUFFER_SIZE = 65536;  
        private InputStream din;   
        private byte[] buffer;    
        private int bufferPointer;  
        private int bytesRead;    
 
        public Parser(InputStream in) {
            din = in;
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
 
       
        public int nextInt() throws IOException {
            int result = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = (c == '-');
            if (neg) c = read();
            while (c >= '0' && c <= '9') {
                result = result * 10 + c - '0';
                c = read();
            }
            if (neg) return -result;
            return result;
        }
 
       	public long nextLong() throws IOException {
            long result = 0;
            byte c = read();
            while (c <= ' ') c = read();
            boolean neg = (c == '-');
            if (neg) c = read();
            while (c >= '0' && c <= '9') {
                result = result * 10 + c - '0';
                c = read();
            }
            if (neg) return -result;
            return result;
        }
        public byte read() throws IOException {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
 
      
        private void fillBuffer() throws IOException {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
    }
}   
